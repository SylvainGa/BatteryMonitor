using Toybox.Application as App;
using Toybox.Background;
using Toybox.System as Sys;
using Toybox.WatchUi as Ui;
using Toybox.Graphics as Gfx;
using Toybox.Complications;
using Toybox.Attention;
using Toybox.Time;
using Toybox.Time.Gregorian;
using Toybox.Math;
using Toybox.Lang;
using Toybox.Application.Storage;

//! App constants
const HISTORY_MAX = 1200; // Quad the max screen size should be enough data to keep but could be too much for large screen so max at 1200 (around 32KB)
const INTERVAL_MIN = 5; // temporal event in minutes
const UPDATE_VERSION = 5; // What version our array structures should be at

//! Object store keys (now they keys are in Storage and are texts, not numbers)
// const HISTORY_KEY = 2;
// const LAST_HISTORY_KEY = 3;
// const LAST_VIEWED_DATA = 4;
// const LAST_CHARGED_DATA = 5;
// const STARTED_CHARGING_DATA = 6;
// const UPDATE_DATA = 7; //  This guy is set if we need to upgrade our data structure to the new version without using the history
// const VIEW_RUNNING = 8; // When True, the main view updates the history data so we skip the background process
// const LAST_SLOPE_CALC = 9;
// const LAST_SLOPE_VALUE = 10;

const COLOR_BAT_OK = Gfx.COLOR_GREEN;
const COLOR_BAT_WARNING = Gfx.COLOR_YELLOW;
const COLOR_BAT_LOW = Gfx.COLOR_ORANGE;
const COLOR_BAT_CRITICAL = Gfx.COLOR_RED;
const COLOR_PROJECTION = Gfx.COLOR_DK_BLUE;

const SCREEN_DATA_MAIN = 1;
const SCREEN_DATA_HR = 2;
const SCREEN_DATA_DAY = 3;
const SCREEN_LAST_CHARGE = 4;
const SCREEN_HISTORY = 5;
const SCREEN_PROJECTION = 6;

//! History Array data type
enum {
	TIMESTAMP,
	BATTERY`,
	SOLAR
}
const HISTORY_ELEMENT_SIZE_SOLAR = 3; // Solar watches have three fields of 4 bytes (signed 32 bits) each, TIMESTAMP, BATTERY and SOLAR
const HISTORY_ELEMENT_SIZE = 2; // Non solar watches have two fields of 4 bytes (signed 32 bits) each, TIMESTAMP and BATTERY

(:background)
class BatteryMonitorApp extends App.AppBase {
	var mView;
	var mGlance;
	var mDelegate;
	public var mHistory;
	public var mHistorySize;
	public var mHistoryModified;

	// Testing array passing by references
	// public var mArray;
	// public var mArraySize;

    function initialize() {
        AppBase.initialize();
    }	

    // onStart() is called on application start up
    function onStart(state) {
		//DEBUG*/ logMessage("Start");

        if (state != null) {
            if (state.get(:launchedFromComplication) != null) {
                if (Attention has :vibrate) {
                    var vibeData = [ new Attention.VibeProfile(50, 200) ]; // On for 200 ms at 50% duty cycle
                    Attention.vibrate(vibeData);
                }
            }
        }

		//DEBUG*/ logMessage("Will run BG every " + (bgIntervals / 60) + " minutes" );
		Background.registerForTemporalEvent(new Time.Duration(300));
    }

    function onBackgroundData(data) {
    	//DEBUG*/ logMessage("App/onBackgroundData");
    	/*DEBUG*/ logMessage("onBG " + data);

		// Make sure we have the latest data from storage if we're empty, otherwise use what you have
		if (mHistory == null) {
			getHistoryFromStorage();
		}
		else {
	    	//DEBUG*/ logMessage("Already have " + mHistorySize);
		}

		// if ($.objectStoreGet("IGNORE_NEXT_BGDATA", false) == true) { // So we skip pending updates that could potentially be in the wrong format after an array redefinition
		// 	$.objectStorePut("IGNORE_NEXT_BGDATA", false);
		// 	return;
		// }

		if (data != null /* && mDelegate == null*/) {
			var size = data.size();
			$.analyzeAndStoreData(data, size);

			// If we had more than one data waiting to be read, to be safe, save the HISTORY right now in case we crash later on
			// if (size > 1 && mHistoryModified == true) {
		    // 	/*DEBUG*/ logMessage("History changed, saving " + mHistorySize);
			// 	$.objectStorePut("HISTORY", mHistory);
			// 	mHistoryModified = false;
			// }
        	Ui.requestUpdate();
		}
    }    

    // onStop() is called when your application is exiting
    function onStop(state) {
		//DEBUG*/ logMessage("Stop (" + (mView == null ? "SD)" : (mGlance == null ? "VW)" : "GL)")));
		if (mHistory != null && mHistoryModified == true) {
			$.objectStorePut("HISTORY", mHistory);
			/*DEBUG*/ logMessage("History changed, saving " + mHistorySize);
			mHistoryModified = false;
		}

		if (mView != null) {
			//DEBUG*/ logMessage("Restarting BG process");
			Background.registerForTemporalEvent(new Time.Duration(300));
		}
    }

	function onSettingsChanged() {
		if (mView != null) {
			mView.onSettingsChanged();
		}
	}

    (:glance)
    function getGlanceView() {
		//DEBUG*/ logMessage("getGlanceView");

		//DEBUG*/ logMessage("Stopping BG process");
		// Terminate the background process as we'll be doing the reading while the glance view is running
		Background.deleteTemporalEvent();

		// Tell the 'Main View' that we launched from Glance
        Storage.setValue("fromGlance", true);

		// If onBackgroundData hasn't fetched it, get the history
		if (mHistory == null) {
			getHistoryFromStorage();
		}

		mView = new BatteryMonitorGlanceView();
		mGlance = mView; // So we know it's specifically a Glance view
        return [ mView ];
    }

    // Return the initial view of your application here
    function getInitialView() {	
		//DEBUG*/ logMessage("getInitialView");

		//DEBUG*/ logMessage("Stopping BG process");
		// Terminate the background process as we'll be doing the reading while the main view is running
		Background.deleteTemporalEvent();

		// If onBackgroundData hasn't fetched it, get the history
		if (mHistory == null) {
			getHistoryFromStorage();
		}

        if ($.objectStoreGet("fromGlance", false) == true) { // Up/Down buttons work when launched from glance (or if we don't have/need buttons)
            $.objectStorePut("fromGlance", false); // In case we change our watch setting later on that we want to start from the widget and not the glance

			mView = new BatteryMonitorView();
			mDelegate = new BatteryMonitorDelegate(mView, mView.method(:onReceive));
			return [ mView , mDelegate ];
        }
        else { // Sucks, but we have to have an extra view so the Up/Down button work in our main view
            $.objectStorePut("fromGlance", false); // In case we change our watch setting later on that we want to start from the widget and not the glance
            return [ new NoGlanceView(), new NoGlanceDelegate() ];
        }
    }
    
    function getServiceDelegate(){
		//DEBUG*/ logMessage("getServiceDelegate");
        return [new BatteryMonitorServiceDelegate()];
    }

	function getHistoryFromStorage() {
		mHistory = $.objectStoreGet("HISTORY", null);
		/*DEBUG*/ buildFakeHistory();
		if (mHistory == null) {
			// If we don't have data, see if the old history array is there and if so, convert it to the new format
			var oldHistory = $.objectStoreGet("HISTORY_KEY", null);
			if (oldHistory != null) {
		    	//DEBUG*/ logMessage("Converting from HISTORY_KEY");
				var isSolar = Sys.getSystemStats().solarIntensity != null ? true : false;
				var elementSize = isSolar ? HISTORY_ELEMENT_SIZE_SOLAR : HISTORY_ELEMENT_SIZE;
				mHistory = new [oldHistory.size() * elementSize];
				for (var i = 0; i < oldHistory.size(); i++) {
					mHistory[i * elementSize + TIMESTAMP] = oldHistory[i][TIMESTAMP];
					mHistory[i * elementSize + BATTERY] = (oldHistory[i][BATTERY] / 100).toNumber();
					if (isSolar == true) {
						mHistory[i * elementSize + SOLAR] = 0; // This wasn't in 1.0
					}
				}
				$.objectStorePut("HISTORY", mHistory); // Make that data our new array
				$.objectStoreErase("HISTORY_KEY"); // Amnd erase the old data

				convertData("LAST_HISTORY_KEY", isSolar);
				convertData("LAST_VIEWED_DATA", isSolar);
				convertData("LAST_CHARGED_DATA", isSolar);
				convertData("STARTED_CHARGING_DATA", isSolar);
			}
		}
		getHistorySize();

		//DEBUG*/ for (var i = 0; i < mHistorySize; i++) { if (mHistory[i*3 + BATTERY] >= 2000) { mHistory[i*3 + BATTERY] = (mHistory[i*3 + BATTERY] - 2000) | 0x400; } } // Replace 2000 Activity flag for a bitwise operator so we can tell which activity was running

		mHistoryModified = false;

		//DEBUG*/ Sys.print("["); for (var i = 0; i < mHistory.size(); i++) { Sys.print(mHistory[i]); if (i < mHistorySize - 1) { Sys.print(","); } } Sys.println("]");
		/*DEBUG*/ Sys.print("["); for (var i = 0; i < mHistorySize; i++) { if (mHistory[i*3 + TIMESTAMP] < 1752135321) { Sys.print(mHistory[i*3 + TIMESTAMP] + "," + mHistory[i*3 + BATTERY] + "," + mHistory[i*3 + SOLAR]); if (i < mHistorySize - 1) { Sys.print(","); } } } Sys.println("]");

		/*DEBUG*/ logMessage("getHistoryFromStorage Read " + mHistorySize);
	}

	function convertData(key, isSolar) {
		var array = $.objectStoreGet(key, null);
		if (array != null) {
			$.objectStorePut(key, [array[TIMESTAMP], (array[BATTERY] / 100).toNumber(), isSolar ? 0 : null]);
		}
	}

	function setHistory(history) {
		mHistory = history;
		getHistorySize();

		return [mHistory, mHistorySize];
	}

	function getHistorySize() {
		var isSolar = Sys.getSystemStats().solarIntensity != null ? true : false;
		var elementSize = isSolar ? HISTORY_ELEMENT_SIZE_SOLAR : HISTORY_ELEMENT_SIZE;

		mHistorySize = mHistory != null ? mHistory.size() / elementSize : 0;

		return mHistorySize;
	}

	function getHistoryModified() {
		return mHistoryModified;
	}

	function setHistoryModified(state) {
		mHistoryModified = state;
	}

	(:debug)
	function buildFakeHistory() {
		// mHistory = [1752038233,221,0,1752038271,220,0,1752038338,219,0,1752038398,217,0,1752038458,214,0,1752038549,212,0,1752038850,209,0,1752039151,201,0,1752039260,200,0,1752039320,198,0,1752039380,196,0,1752039451,194,0,1752040052,193,0,1752040352,192,0,1752040954,191,0,1752041254,190,0,1752041554,189,0,1752041855,188,0,1752042455,187,0,1752042756,186,0,1752043056,185,0,1752043357,184,0,1752043657,183,0,1752043957,182,0,1752044557,181,0,1752044857,180,0,1752045158,179,0,1752045457,178,0,1752046057,177,0,1752046357,176,0,1752046657,175,0,1752047258,174,0,1752047859,173,0,1752048158,172,0,1752048759,171,0,1752049058,170,0,1752049358,169,0,1752049958,168,0,1752050258,167,0,1752050558,166,0,1752050859,165,0,1752051159,164,0,1752051760,163,0,1752052361,162,0,1752052961,161,0,1752053561,160,0,1752053860,159,0,1752054460,158,0,1752055061,157,0,1752055361,156,0,1752055962,155,0,1752056563,154,0,1752056863,153,0,1752057163,152,0,1752057463,151,0,1752058063,150,0,1752058664,149,0,1752059265,148,0,1752059565,147,0,1752060165,146,0,1752060465,145,0,1752061066,144,0,1752061665,143,0,1752062298,142,0,1752062567,141,0,1752062867,140,0,1752063467,139,0,1752063767,138,0,1752064367,137,0,1752064668,136,8,1752066743,415,0,1752066757,414,0,1752066834,413,0,1752066894,411,0,1752067030,410,0,1752067331,409,5,1752068280,408,0,1752068340,407,0,1752068400,406,0,1752068460,405,0,1752068520,404,0,1752068580,402,0,1752068700,401,0,1752068760,400,0,1752068820,399,0,1752068880,397,4,1752068940,396,0,1752069000,395,0,1752069060,394,0,1752069120,393,0,1752069180,392,0,1752069240,391,0,1752069300,390,0,1752069359,389,0,1752069661,388,0,1752069961,387,0,1752070261,386,0,1752070861,385,1,1752071461,384,1,1752072061,383,0,1752072961,382,0,1752073861,381,1,1752074461,380,1,1752074761,379,1,1752075961,378,2,1752076561,377,24,1752077162,376,6,1752077462,375,0,1752077761,374,0,1752078061,373,0,1752078661,369,12,1752078961,360,100,1752079261,356,100,1752079561,352,100,1752079861,348,100,1752080162,343,100,1752080461,338,100,1752080761,333,100,1752081062,329,100,1752081361,324,35,1752081661,320,0,1752081894,312,0,1752081904,311,0,1752081954,310,0,1752082014,309,0,1752082074,307,0,1752082087,306,0,1752082160,304,0,1752082220,302,0,1752082280,300,0,1752082340,299,0,1752082400,297,0,1752082460,296,0,1752082520,294,2,1752082580,292,0,1752082640,291,0,1752082700,289,0,1752082760,287,0,1752082820,286,0,1752082880,284,0,1752082940,282,0,1752083000,280,0,1752083060,279,0,1752083120,277,0,1752083180,275,0,1752083240,274,0,1752083300,272,0,1752083360,270,0,1752083420,269,0,1752083480,267,0,1752083540,265,0,1752083600,263,0,1752083660,262,0,1752083720,260,0,1752083780,258,0,1752083840,256,0,1752083900,255,0,1752084203,253,0,1752084504,252,0,1752084804,251,0,1752085104,250,0,1752085705,249,0,1752086006,248,0,1752086606,247,0,1752087205,246,0,1752087506,245,0,1752088106,244,0,1752088407,243,0,1752088707,242,0,1752089308,241,0,1752089598,239,0,1752089659,238,0,1752089700,237,0,1752089705,236,0,1752089898,235,0,1752090498,234,0,1752090877,233,0,1752090923,232,0,1752091099,231,0,1752091398,230,7,1752091698,229,0,1752092298,228,26,1752092598,227,5,1752092899,226,0,1752093199,225,14,1752093498,224,0,1752094098,223,0,1752094398,222,0,1752094698,221,0,1752094999,220,0,1752095486,219,0,1752095546,218,0,1752095604,217,0,1752095906,216,0,1752096207,215,0,1752096506,214,0,1752096806,213,0,1752097106,212,3,1752097406,211,0,1752097706,210,9,1752098007,209,0,1752098307,208,0,1752098608,207,0,1752099207,196,6,1752099508,188,12,1752099807,181,10,1752100107,175,3,1752100407,168,9,1752100707,160,0,1752101007,152,0,1752101307,145,0,1752101607,138,0,1752101907,129,4,1752102207,122,0,1752102349,118,0,1752102363,117,0,1752102507,116,0,1752102807,115,2,1752103107,114,0,1752103407,113,1,1752103707,112,0,1752104307,111,0,1752104908,110,0,1752105207,109,1,1752105808,107,0,1752106107,106,0,1752106707,104,0,1752107307,103,0,1752107607,102,0,1752107907,101,0,1752108207,100,0,1752108808,99,0,1752109107,98,0,1752109707,97,0,1752110007,96,0,1752110607,95,0,1752110907,94,0,1752111507,93,0,1752111807,92,0,1752112407,91,0,1752113008,90,0,1752113308,89,0,1752113608,88,0,1752113907,87,0,1752114047,86,0,1752114409,128,0,1752115023,214,0,1752115083,223,0,1752115143,232,0,1752115203,241,0,1752115263,250,0,1752115323,259,0,1752115383,267,0,1752115443,276,0,1752115503,285,0,1752115563,294,0,1752115623,303,0,1752115683,312,0,1752115743,320,0,1752115803,329,0,1752115863,338,0,1752115923,347,0,1752115983,356,0,1752116043,364,0,1752116103,373,0,1752116163,382,0,1752116223,391,0,1752116283,400,0,1752116343,409,0,1752116386,413,0,1752116405,417,0,1752116435,421,0,1752117853,625,0,1752117975,624,0,1752120927,844,0,1752121316,843,0,1752121376,842,0,1752121436,840,0,1752121514,839,0,1752122114,838,0,1752123314,837,0,1752123615,836,0,1752124517,835,0,1752125418,834,0,1752126618,833,0,1752127818,832,0,1752128419,831,0,1752130219,830,0,1752131120,829,0,1752132321,828,0,1752133221,827,0,1752134122,826,0,1752135321,825,0,1752136521,824,0,1752138021,823,0,1752138922,822,0,1752140122,821,0,1752141323,820,0,1752141922,819,0,1752142824,818,0,1752144023,817,0,1752144269,816,0,1752162176,782,0,1752162484,781,0,1752162784,780,0,1752163384,779,0,1752163984,778,0,1752164284,777,0,1752164584,776,0,1752165184,775,0,1752165784,774,0,1752166084,773,0,1752166684,772,0,1752167284,771,0,1752167584,770,0,1752168185,769,0,1752168486,768,0,1752168756,767,0,1752169096,761,0,1752169396,756,0,1752169696,752,0,1752169996,747,0,1752170296,743,0,1752170596,740,0,1752170896,735,0,1752171196,731,0,1752171496,727,0,1752171796,722,0,1752172096,715,0,1752172173,714,0,1752172396,713,0,1752172696,712,32,1752172996,711,9,1752173596,710,6,1752174069,709,0,1752174129,708,0,1752174189,707,0,1752174272,706,1,1752174317,704,1,1752174619,703,1,1752175219,702,0,1752175820,701,0,1752176420,700,20,1752177021,699,4,1752177922,698,0,1752178521,697,0,1752178821,696,3,1752179721,695,0,1752180321,694,0,1752180922,693,0,1752181521,692,0,1752182122,691,0,1752182423,690,0,1752183023,689,0,1752183623,688,0,1752183923,687,0,1752184524,686,0,1752184823,685,0,1752185424,684,0,1752186025,683,0,1752186325,682,0,1752187225,681,0,1752187525,680,0,1752188125,679,0,1752188226,678,0,1752188425,677,1,1752189025,676,0,1752189325,675,0,1752189625,674,0,1752190225,673,0,1752190525,672,0,1752191125,671,3,1752191425,669,1,1752191725,668,0,1752192025,667,0,1752192625,666,0,1752192926,665,0,1752193526,664,0,1752194125,663,0,1752194725,662,0,1752195325,661,0,1752195625,660,0,1752196225,659,0,1752196525,658,0,1752196826,657,0,1752197426,655,0,1752198026,654,0,1752198326,653,0,1752198626,652,0,1752199226,651,0,1752199827,650,0,1752200127,648,0,1752200726,647,0,1752201026,646,0,1752201326,645,0,1752201627,644,0,1752201927,643,0,1752202528,642,0,1752202827,641,0,1752203128,640,0,1752203428,639,0,1752203728,638,0,1752204329,637,0,1752204628,636,0,1752205228,635,0,1752205528,634,0,1752205829,633,0,1752206097,632,0,1752206112,631,0,1752206429,630,0,1752206580,629,0,1752206642,628,0,1752206702,626,0,1752206739,624,0,1752207039,623,0,1752207640,622,0,1752208240,621,0,1752208540,620,0,1752209140,619,0,1752209440,618,0,1752209740,617,0,1752210041,616,0,1752210641,615,0,1752210941,614,0,1752211542,613,0,1752211842,612,0,1752212442,611,0,1752212742,610,0,1752213342,609,0,1752213643,608,0,1752214243,607,0,1752214843,606,0,1752215443,605,0,1752216043,604,0,1752216343,603,0,1752217244,602,0,1752217844,601,0,1752218144,600,0,1752218744,599,0,1752219344,598,0,1752220244,597,0,1752220844,596,0,1752221744,595,0,1752222044,594,0,1752222945,593,0,1752224145,592,0,1752224446,591,0,1752225345,590,0,1752226845,589,0,1752227745,588,0,1752228645,587,0,1752229545,586,0,1752230145,585,0,1752231045,584,0,1752231645,583,0,1752232026,582,0,1752232245,581,0,1752233745,580,0,1752234645,579,0,1752234946,578,0,1752235847,577,0,1752236447,576,1,1752237348,575,0,1752238248,574,0,1752238848,573,59,1752239148,572,6,1752239448,571,5,1752240048,570,6,1752240348,569,0,1752241248,568,0,1752241848,567,0,1752242448,566,0,1752242748,565,0,1752243348,564,0,1752243949,563,0,1752244250,562,0,1752244850,561,0,1752245450,560,0,1752245750,559,0,1752246650,558,0,1752247550,557,0,1752248150,556,0,1752248450,555,0,1752249052,554,0,1752249952,553,0,1752250552,552,0,1752251152,551,0,1752252052,550,0,1752252353,549,3,1752252954,548,0,1752253255,547,0,1752253855,546,0,1752254455,545,0,1752255656,544,5,1752256255,543,32,1752257455,542,10,1752257755,541,55,1752258355,540,16,1752258655,539,17,1752259556,538,19,1752261957,537,0,1752262557,536,48,1752263157,535,1,1752263457,533,1,1752263758,532,26,1752264358,531,3,1752265258,530,21,1752266158,529,5,1752266458,528,5,1752267059,527,19,1752267659,526,16,1752268259,525,12,1752268859,524,28,1752269459,523,32,1752269711,522,11,1752269771,521,18,1752269824,519,12,1752269875,518,12,1752270126,517,15,1752270426,515,0,1752270726,514,0,1752271026,513,0,1752271326,505,1,1752271626,501,2,1752271926,497,12,1752272226,493,20,1752272526,489,21,1752272827,484,66,1752273126,481,74,1752273426,476,44,1752273726,472,3,1752274027,468,3,1752274326,462,0,1752274626,452,0,1752274927,448,0,1752275227,447,6,1752275827,446,0,1752276127,445,0,1752277027,444,0,1752277627,443,0,1752278227,442,0,1752278827,441,0,1752279127,440,0,1752279727,439,0,1752280328,438,0,1752281227,437,0,1752281827,436,0,1752282428,435,0,1752283028,434,0,1752283628,433,0,1752284228,432,0,1752284828,431,0,1752285728,430,0,1752286328,429,0,1752286628,428,0,1752287528,427,0,1752288129,426,0,1752288728,425,0,1752289329,424,0,1752290229,423,0,1752290521,422,0,1752290581,421,0,1752290602,420,0,1752290902,419,0,1752291502,418,0,1752292703,417,0,1752293304,416,0,1752293904,415,0,1752294504,414,0,1752294804,413,0,1752295104,412,0,1752296005,411,0,1752296304,410,0,1752296904,409,0,1752297806,408,0,1752298709,407,0,1752299608,406,0,1752300508,405,0,1752301108,404,0,1752301709,403,0,1752302608,402,0,1752303508,401,0,1752304109,400,0,1752305009,399,0,1752305609,398,0,1752305909,397,0,1752306509,396,0,1752307409,395,0,1752308009,394,0,1752308609,393,0,1752309210,392,0,1752309510,391,0,1752310110,390,0,1752311010,389,0,1752311610,388,0,1752311910,387,0,1752312510,386,0,1752313110,385,0,1752313410,384,0,1752314010,383,0,1752314610,382,0,1752314910,381,0,1752315511,380,0,1752315812,379,0,1752316412,378,0,1752317012,377,0,1752317312,376,0,1752317912,374,0,1752318259,373,0,1752337168,316,1,1752337767,315,4,1752338367,314,2,1752338667,313,2,1752338967,312,2,1752339267,311,3,1752339567,310,0,1752339867,309,0,1752340167,308,0,1752340467,307,3,1752341368,306,1,1752341969,305,4,1752342570,304,3,1752342870,303,6,1752343170,302,13,1752343470,301,10,1752344070,299,12,1752344370,297,9,1752344670,294,0,1752344970,293,0,1752345570,292,5,1752345870,291,0,1752346470,290,2,1752346770,289,4,1752347071,287,5,1752347372,286,3,1752347672,285,0,1752348272,283,1,1752348572,282,0,1752348872,281,0,1752349473,280,1,1752349773,279,2,1752350073,278,1,1752350373,277,1,1752350973,276,0,1752351274,275,1,1752351573,274,10,1752352173,273,0,1752352473,272,0,1752352773,271,0,1752353074,270,1,1752353674,269,1,1752354274,267,0,1752354574,266,1,1752355174,265,0,1752355474,264,0,1752355774,263,0,1752356074,261,4,1752356675,260,3,1752356974,259,1,1752357274,258,0,1752357874,257,0,1752358174,256,0,1752358474,255,0,1752359074,254,0,1752359674,253,0,1752359974,252,0,1752360575,251,0,1752360875,250,0,1752361175,249,0,1752361775,248,0,1752362075,247,0,1752362375,246,0,1752362675,245,0,1752362975,244,0,1752363275,243,0,1752363575,242,0,1752363875,240,0,1752364175,239,0,1752364775,238,1,1752365075,237,0,1752365375,236,0,1752365975,235,0,1752366275,234,0,1752366575,233,0,1752367175,232,0,1752367475,231,0,1752367775,230,0,1752368075,229,0,1752368375,228,0,1752368975,227,0,1752369275,226,0,1752369575,225,0,1752369875,224,0,1752370175,223,0,1752370475,222,0,1752370775,221,0,1752371075,220,0,1752371375,219,0,1752371675,218,0,1752371975,217,0,1752372275,216,0,1752372875,215,0,1752373175,213,0,1752373475,2210,0,1752373775,2209,0,1752374075,2207,0,1752374375,2206,0,1752374675,202,0,1752374878,198,0,1752374915,197,0,1752374998,196,0,1752375011,195,0,1752379082,183,0,1752410914,40,0,1752410960,39,0];
	    // var now = Time.now().value(); //in seconds from UNIX epoch in UTC
		// mHistory = [now - 6000, 800, 0, now - 3000, 2790, 0, now - 1200, 2780, 0, now - 900, 2775, 0, now - 600, 770, 0, now - 300, 750, 0, now - 200, 740, 0, now - 100, 730, 0, now, 730, 0];
		//return;
		// var span = 60 * 2460; // 1 day 16 hours
		// var start = now - span;
		// var size = span / (5 * 60); // One entry per 5 minutes
		// var batInitialLevel = 80.0;
		// var batLastLevel = 5.0;
		// var batDrain = (batInitialLevel - batLastLevel) / size;
		// var isSolar = Sys.getSystemStats().solarIntensity != null ? true : false;
		// var elementSize = isSolar ? HISTORY_ELEMENT_SIZE_SOLAR : HISTORY_ELEMENT_SIZE;
		// mHistory = new [size * elementSize];
		// for (var i = 0; i < size; i++) {
		// 	mHistory[i * elementSize + TIMESTAMP] = start + i * 5 * 60;
		// 	mHistory[i * elementSize + BATTERY] = ((batInitialLevel - batDrain * i) * 10).toNumber();
		// 	if (isSolar) {
		// 		mHistory[i * elementSize + SOLAR] = Math.rand() % 100;
		// 	}
		// }
		// mHistorySize = size;
	}

	(:release)
	function buildFakeHistory() {
		if (mHistory.size() < 100) {
			mHistory = [1752038233,221,0,1752038271,220,0,1752038338,219,0,1752038398,217,0,1752038458,214,0,1752038549,212,0,1752038850,209,0,1752039151,201,0,1752039260,200,0,1752039320,198,0,1752039380,196,0,1752039451,194,0,1752040052,193,0,1752040352,192,0,1752040954,191,0,1752041254,190,0,1752041554,189,0,1752041855,188,0,1752042455,187,0,1752042756,186,0,1752043056,185,0,1752043357,184,0,1752043657,183,0,1752043957,182,0,1752044557,181,0,1752044857,180,0,1752045158,179,0,1752045457,178,0,1752046057,177,0,1752046357,176,0,1752046657,175,0,1752047258,174,0,1752047859,173,0,1752048158,172,0,1752048759,171,0,1752049058,170,0,1752049358,169,0,1752049958,168,0,1752050258,167,0,1752050558,166,0,1752050859,165,0,1752051159,164,0,1752051760,163,0,1752052361,162,0,1752052961,161,0,1752053561,160,0,1752053860,159,0,1752054460,158,0,1752055061,157,0,1752055361,156,0,1752055962,155,0,1752056563,154,0,1752056863,153,0,1752057163,152,0,1752057463,151,0,1752058063,150,0,1752058664,149,0,1752059265,148,0,1752059565,147,0,1752060165,146,0,1752060465,145,0,1752061066,144,0,1752061665,143,0,1752062298,142,0,1752062567,141,0,1752062867,140,0,1752063467,139,0,1752063767,138,0,1752064367,137,0,1752064668,136,8,1752066743,415,0,1752066757,414,0,1752066834,413,0,1752066894,411,0,1752067030,410,0,1752067331,409,5,1752068280,408,0,1752068340,407,0,1752068400,406,0,1752068460,405,0,1752068520,404,0,1752068580,402,0,1752068700,401,0,1752068760,400,0,1752068820,399,0,1752068880,397,4,1752068940,396,0,1752069000,395,0,1752069060,394,0,1752069120,393,0,1752069180,392,0,1752069240,391,0,1752069300,390,0,1752069359,389,0,1752069661,388,0,1752069961,387,0,1752070261,386,0,1752070861,385,1,1752071461,384,1,1752072061,383,0,1752072961,382,0,1752073861,381,1,1752074461,380,1,1752074761,379,1,1752075961,378,2,1752076561,377,24,1752077162,376,6,1752077462,375,0,1752077761,374,0,1752078061,373,0,1752078661,369,12,1752078961,360,100,1752079261,356,100,1752079561,352,100,1752079861,348,100,1752080162,343,100,1752080461,338,100,1752080761,333,100,1752081062,329,100,1752081361,324,35,1752081661,320,0,1752081894,312,0,1752081904,311,0,1752081954,310,0,1752082014,309,0,1752082074,307,0,1752082087,306,0,1752082160,304,0,1752082220,302,0,1752082280,300,0,1752082340,299,0,1752082400,297,0,1752082460,296,0,1752082520,294,2,1752082580,292,0,1752082640,291,0,1752082700,289,0,1752082760,287,0,1752082820,286,0,1752082880,284,0,1752082940,282,0,1752083000,280,0,1752083060,279,0,1752083120,277,0,1752083180,275,0,1752083240,274,0,1752083300,272,0,1752083360,270,0,1752083420,269,0,1752083480,267,0,1752083540,265,0,1752083600,263,0,1752083660,262,0,1752083720,260,0,1752083780,258,0,1752083840,256,0,1752083900,255,0,1752084203,253,0,1752084504,252,0,1752084804,251,0,1752085104,250,0,1752085705,249,0,1752086006,248,0,1752086606,247,0,1752087205,246,0,1752087506,245,0,1752088106,244,0,1752088407,243,0,1752088707,242,0,1752089308,241,0,1752089598,239,0,1752089659,238,0,1752089700,237,0,1752089705,236,0,1752089898,235,0,1752090498,234,0,1752090877,233,0,1752090923,232,0,1752091099,231,0,1752091398,230,7,1752091698,229,0,1752092298,228,26,1752092598,227,5,1752092899,226,0,1752093199,225,14,1752093498,224,0,1752094098,223,0,1752094398,222,0,1752094698,221,0,1752094999,220,0,1752095486,219,0,1752095546,218,0,1752095604,217,0,1752095906,216,0,1752096207,215,0,1752096506,214,0,1752096806,213,0,1752097106,212,3,1752097406,211,0,1752097706,210,9,1752098007,209,0,1752098307,208,0,1752098608,207,0,1752099207,196,6,1752099508,188,12,1752099807,181,10,1752100107,175,3,1752100407,168,9,1752100707,160,0,1752101007,152,0,1752101307,145,0,1752101607,138,0,1752101907,129,4,1752102207,122,0,1752102349,118,0,1752102363,117,0,1752102507,116,0,1752102807,115,2,1752103107,114,0,1752103407,113,1,1752103707,112,0,1752104307,111,0,1752104908,110,0,1752105207,109,1,1752105808,107,0,1752106107,106,0,1752106707,104,0,1752107307,103,0,1752107607,102,0,1752107907,101,0,1752108207,100,0,1752108808,99,0,1752109107,98,0,1752109707,97,0,1752110007,96,0,1752110607,95,0,1752110907,94,0,1752111507,93,0,1752111807,92,0,1752112407,91,0,1752113008,90,0,1752113308,89,0,1752113608,88,0,1752113907,87,0,1752114047,86,0,1752114409,128,0,1752115023,214,0,1752115083,223,0,1752115143,232,0,1752115203,241,0,1752115263,250,0,1752115323,259,0,1752115383,267,0,1752115443,276,0,1752115503,285,0,1752115563,294,0,1752115623,303,0,1752115683,312,0,1752115743,320,0,1752115803,329,0,1752115863,338,0,1752115923,347,0,1752115983,356,0,1752116043,364,0,1752116103,373,0,1752116163,382,0,1752116223,391,0,1752116283,400,0,1752116343,409,0,1752116386,413,0,1752116405,417,0,1752116435,421,0,1752117853,625,0,1752117975,624,0,1752120927,844,0,1752121316,843,0,1752121376,842,0,1752121436,840,0,1752121514,839,0,1752122114,838,0,1752123314,837,0,1752123615,836,0,1752124517,835,0,1752125418,834,0,1752126618,833,0,1752127818,832,0,1752128419,831,0,1752130219,830,0,1752131120,829,0,1752132321,828,0,1752133221,827,0,1752134122,826,0,1752135321,825,0,1752136521,824,0,1752138021,823,0,1752138922,822,0,1752140122,821,0,1752141323,820,0,1752141922,819,0,1752142824,818,0,1752144023,817,0,1752144269,816,0,1752162176,782,0,1752162484,781,0,1752162784,780,0,1752163384,779,0,1752163984,778,0,1752164284,777,0,1752164584,776,0,1752165184,775,0,1752165784,774,0,1752166084,773,0,1752166684,772,0,1752167284,771,0,1752167584,770,0,1752168185,769,0,1752168486,768,0,1752168756,767,0,1752169096,761,0,1752169396,756,0,1752169696,752,0,1752169996,747,0,1752170296,743,0,1752170596,740,0,1752170896,735,0,1752171196,731,0,1752171496,727,0,1752171796,722,0,1752172096,715,0,1752172173,714,0,1752172396,713,0,1752172696,712,32,1752172996,711,9,1752173596,710,6,1752174069,709,0,1752174129,708,0,1752174189,707,0,1752174272,706,1,1752174317,704,1,1752174619,703,1,1752175219,702,0,1752175820,701,0,1752176420,700,20,1752177021,699,4,1752177922,698,0,1752178521,697,0,1752178821,696,3,1752179721,695,0,1752180321,694,0,1752180922,693,0,1752181521,692,0,1752182122,691,0,1752182423,690,0,1752183023,689,0,1752183623,688,0,1752183923,687,0,1752184524,686,0,1752184823,685,0,1752185424,684,0,1752186025,683,0,1752186325,682,0,1752187225,681,0,1752187525,680,0,1752188125,679,0,1752188226,678,0,1752188425,677,1,1752189025,676,0,1752189325,675,0,1752189625,674,0,1752190225,673,0,1752190525,672,0,1752191125,671,3,1752191425,669,1,1752191725,668,0,1752192025,667,0,1752192625,666,0,1752192926,665,0,1752193526,664,0,1752194125,663,0,1752194725,662,0,1752195325,661,0,1752195625,660,0,1752196225,659,0,1752196525,658,0,1752196826,657,0,1752197426,655,0,1752198026,654,0,1752198326,653,0,1752198626,652,0,1752199226,651,0,1752199827,650,0,1752200127,648,0,1752200726,647,0,1752201026,646,0,1752201326,645,0,1752201627,644,0,1752201927,643,0,1752202528,642,0,1752202827,641,0,1752203128,640,0,1752203428,639,0,1752203728,638,0,1752204329,637,0,1752204628,636,0,1752205228,635,0,1752205528,634,0,1752205829,633,0,1752206097,632,0,1752206112,631,0,1752206429,630,0,1752206580,629,0,1752206642,628,0,1752206702,626,0,1752206739,624,0,1752207039,623,0,1752207640,622,0,1752208240,621,0,1752208540,620,0,1752209140,619,0,1752209440,618,0,1752209740,617,0,1752210041,616,0,1752210641,615,0,1752210941,614,0,1752211542,613,0,1752211842,612,0,1752212442,611,0,1752212742,610,0,1752213342,609,0,1752213643,608,0,1752214243,607,0,1752214843,606,0,1752215443,605,0,1752216043,604,0,1752216343,603,0,1752217244,602,0,1752217844,601,0,1752218144,600,0,1752218744,599,0,1752219344,598,0,1752220244,597,0,1752220844,596,0,1752221744,595,0,1752222044,594,0,1752222945,593,0,1752224145,592,0,1752224446,591,0,1752225345,590,0,1752226845,589,0,1752227745,588,0,1752228645,587,0,1752229545,586,0,1752230145,585,0,1752231045,584,0,1752231645,583,0,1752232026,582,0,1752232245,581,0,1752233745,580,0,1752234645,579,0,1752234946,578,0,1752235847,577,0,1752236447,576,1,1752237348,575,0,1752238248,574,0,1752238848,573,59,1752239148,572,6,1752239448,571,5,1752240048,570,6,1752240348,569,0,1752241248,568,0,1752241848,567,0,1752242448,566,0,1752242748,565,0,1752243348,564,0,1752243949,563,0,1752244250,562,0,1752244850,561,0,1752245450,560,0,1752245750,559,0,1752246650,558,0,1752247550,557,0,1752248150,556,0,1752248450,555,0,1752249052,554,0,1752249952,553,0,1752250552,552,0,1752251152,551,0,1752252052,550,0,1752252353,549,3,1752252954,548,0,1752253255,547,0,1752253855,546,0,1752254455,545,0,1752255656,544,5,1752256255,543,32,1752257455,542,10,1752257755,541,55,1752258355,540,16,1752258655,539,17,1752259556,538,19,1752261957,537,0,1752262557,536,48,1752263157,535,1,1752263457,533,1,1752263758,532,26,1752264358,531,3,1752265258,530,21,1752266158,529,5,1752266458,528,5,1752267059,527,19,1752267659,526,16,1752268259,525,12,1752268859,524,28,1752269459,523,32,1752269711,522,11,1752269771,521,18,1752269824,519,12,1752269875,518,12,1752270126,517,15,1752270426,515,0,1752270726,514,0,1752271026,513,0,1752271326,505,1,1752271626,501,2,1752271926,497,12,1752272226,493,20,1752272526,489,21,1752272827,484,66,1752273126,481,74,1752273426,476,44,1752273726,472,3,1752274027,468,3,1752274326,462,0,1752274626,452,0,1752274927,448,0,1752275227,447,6,1752275827,446,0,1752276127,445,0,1752277027,444,0,1752277627,443,0,1752278227,442,0,1752278827,441,0,1752279127,440,0,1752279727,439,0,1752280328,438,0,1752281227,437,0,1752281827,436,0,1752282428,435,0,1752283028,434,0,1752283628,433,0,1752284228,432,0,1752284828,431,0,1752285728,430,0,1752286328,429,0,1752286628,428,0,1752287528,427,0,1752288129,426,0,1752288728,425,0,1752289329,424,0,1752290229,423,0,1752290521,422,0,1752290581,421,0,1752290602,420,0,1752290902,419,0,1752291502,418,0,1752292703,417,0,1752293304,416,0,1752293904,415,0,1752294504,414,0,1752294804,413,0,1752295104,412,0,1752296005,411,0,1752296304,410,0,1752296904,409,0,1752297806,408,0,1752298709,407,0,1752299608,406,0,1752300508,405,0,1752301108,404,0,1752301709,403,0,1752302608,402,0,1752303508,401,0,1752304109,400,0,1752305009,399,0,1752305609,398,0,1752305909,397,0,1752306509,396,0,1752307409,395,0,1752308009,394,0,1752308609,393,0,1752309210,392,0,1752309510,391,0,1752310110,390,0,1752311010,389,0,1752311610,388,0,1752311910,387,0,1752312510,386,0,1752313110,385,0,1752313410,384,0,1752314010,383,0,1752314610,382,0,1752314910,381,0,1752315511,380,0,1752315812,379,0,1752316412,378,0,1752317012,377,0,1752317312,376,0,1752317912,374,0,1752318259,373,0,1752337168,316,1,1752337767,315,4,1752338367,314,2,1752338667,313,2,1752338967,312,2,1752339267,311,3,1752339567,310,0,1752339867,309,0,1752340167,308,0,1752340467,307,3,1752341368,306,1,1752341969,305,4,1752342570,304,3,1752342870,303,6,1752343170,302,13,1752343470,301,10,1752344070,299,12,1752344370,297,9,1752344670,294,0,1752344970,293,0,1752345570,292,5,1752345870,291,0,1752346470,290,2,1752346770,289,4,1752347071,287,5,1752347372,286,3,1752347672,285,0,1752348272,283,1,1752348572,282,0,1752348872,281,0,1752349473,280,1,1752349773,279,2,1752350073,278,1,1752350373,277,1,1752350973,276,0,1752351274,275,1,1752351573,274,10,1752352173,273,0,1752352473,272,0,1752352773,271,0,1752353074,270,1,1752353674,269,1,1752354274,267,0,1752354574,266,1,1752355174,265,0,1752355474,264,0,1752355774,263,0,1752356074,261,4,1752356675,260,3,1752356974,259,1,1752357274,258,0,1752357874,257,0,1752358174,256,0,1752358474,255,0,1752359074,254,0,1752359674,253,0,1752359974,252,0,1752360575,251,0,1752360875,250,0,1752361175,249,0,1752361775,248,0,1752362075,247,0,1752362375,246,0,1752362675,245,0,1752362975,244,0,1752363275,243,0,1752363575,242,0,1752363875,240,0,1752364175,239,0,1752364775,238,1,1752365075,237,0,1752365375,236,0,1752365975,235,0,1752366275,234,0,1752366575,233,0,1752367175,232,0,1752367475,231,0,1752367775,230,0,1752368075,229,0,1752368375,228,0,1752368975,227,0,1752369275,226,0,1752369575,225,0,1752369875,224,0,1752370175,223,0,1752370475,222,0,1752370775,221,0,1752371075,220,0,1752371375,219,0,1752371675,218,0,1752371975,217,0,1752372275,216,0,1752372875,215,0,1752373175,213,0,1752373475,2210,0,1752373775,2209,0,1752374075,2207,0,1752374375,2206,0,1752374675,202,0,1752374878,198,0,1752374915,197,0,1752374998,196,0,1752375011,195,0,1752379082,183,0,1752410914,40,0,1752410960,39,0];
		}
	}
}
